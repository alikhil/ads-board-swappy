@using Swappy_V2.Models
@model DealModel

@{
    var edit = ViewData["EditDeal"] != null && (bool)ViewData["EditDeal"] == true;
    ViewData["Edit"] = edit;
    ViewBag.Title = edit ? "Редактировать" : "Создать объявление";
    
}
<h3>@(edit ? "Редактирование" : "Создание") объявления</h3>
@using (Html.BeginForm(edit ? "Edit" : "Create", "Deals", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(false, " ", new { @class = "text-danger", id = "valid-errors" })
        @Html.HiddenFor(model => model.Id)
       

        <div class="form-group">
            @Html.LabelFor(model => model.Title)
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
       
        <div class="form-group">
            @Html.LabelFor(model => model.Description)
            @Html.TextAreaFor(model => model.Description, new { @class = "form-control" } )
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <label>Вещи на которые вы готовы обменяться:</label>
            @{int cnt = 0;}
            <div id="eitems">
                @if (Model.Variants != null)
                {
                    foreach (ItemModel item in Model.Variants)
                    {
                        if (item != null)
                        {
                            string str = cnt++ % 2 == 0 ? "primary" : "success";
                            Html.RenderPartial("ShowItem", item, new ViewDataDictionary(ViewData) { { "color", str } });
                        }

                    }
                }
            </div>
           
            <strong>
                @Ajax.ActionLink("Добавить вещь", "AddNewItem", "Deals", new object { }, new AjaxOptions
                    {
                        UpdateTargetId = "eitems",
                        InsertionMode = InsertionMode.InsertAfter,
                        OnSuccess = "OnCompleteAjax(data)"
                    }, htmlAttributes: new { @class = "inline btn btn-xs btn-info item-tag" })
            </strong>
        </div>

        <div class="form-group checkbox">
            @Html.Label("AnotherVariants","Рассмотрю другие варианты обмена")
            @Html.EditorFor(model => model.AnotherVariants)
            @Html.ValidationMessageFor(model => model.AnotherVariants, "", new { @class = "text-danger" })
        </div>


        <div id="tooltip"></div>

        @*Modal window for items*@
        <div class="modal fade" id="itemEditModal" mode="edit" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-small">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close cancel-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="exampleModalLabel">Редактировать</h4>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="title-text" class="control-label">Название</label>
                                <input type="text" class="form-control" id="title-text">
                            </div>
                            <div class="form-group">
                                <label for="description-text" class="control-label">Примечания</label>
                                <textarea class="form-control fixed-area" id="description-text"></textarea>
                            </div>
                        </form>
                        <div id="modal-errors" class="text-danger">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default cancel-btn" data-dismiss="modal">Отмена</button>
                        <button type="button" class="btn btn-primary save-btn">Изменить</button>
                    </div>
                </div>
            </div>
        </div>
        <br/>
       
        <div class="form-group">
            @Html.Label("file","Изображение:")
            <p><span id="image-name"></span></p>
            <p><span class="text-danger" id="image-validation"></span></p>
            <div class="image-div-150">
                <div class="image-center-div">
                    <img class="image-item" id="upload-image" src="@(Model.ImageUrl ?? "/images/noImage.gif")" />
                </div>
            </div>
        </div>

        <div class="form-group ">
            <div class="btn-primary btn fileUpload">
                <label for="file" class="control-label">Выбрать изображение</label>
                <input type="file" id="file" class="upload" name="file" />
            </div>
            <input type="submit" value="Сохранить" class="btn btn-default" />

        </div>

    </div>
}
@section scripts{
    <script type="text/javascript">
    $(function () {
         $("#file").change(function () {
             var file = this.files[0];
             if (file === undefined)
                 return;
            $("#image-name").text(file.name);
            setImage("/images/loading.gif");
            $("#image-validation").text("");
            isFileValid(file, function (isValid) {
                if (isValid)
                    displayPreview(file);
                else {
                    console.log("Not valid");
                    setImage("");
                    $("#image-validation").text("Изображение должно быть в формате jpeg,gif или png. И должно весить не более 4МБ.")
                }
            });

        });
    });

        function isFileValid(file, callback){
            if (isExtensionsValid(file.name))
                isFileTypeValid(file, callback);
            else
                callback(false);
        }

        function getExtension(filename) {
            var parts = filename.split('.');
            return parts[parts.length - 1];
        }

        function isFileTypeValid(file, callback) {
            console.log(file.type);
            var fileReader = new FileReader();
            fileReader.onloadend = function (e) {
                var arr = (new Uint8Array(e.target.result)).subarray(0, 4);
                var header = "";
                for (var i = 0; i < arr.length; i++) {
                    header += arr[i].toString(16);
                }
                console.log(header);
                switch (header) {
                    case "89504e47":    //png
                    case "47494638":    //gif
                    case "ffd8ffe0":    //jpg
                    case "ffd8ffe1":
                    case "ffd8ffe2":
                        callback(true);
                        break;
                    default:
                        callback(false);
                        break;
                }

            };
            fileReader.readAsArrayBuffer(file);
        }

        function isExtensionsValid(filename){
            var ext = getExtension(filename);
            switch (ext.toLowerCase()) {
                case 'jpg':
                case 'gif':
                case 'bmp':
                case 'png':
                    return true;
                default:
                    return false;
            }
            return false;
        }

        function onFileLoad(e) {
            setImage(e.target.result);
        }

        function displayPreview(file) {
            var reader = new FileReader();
            reader.onload = onFileLoad;
            reader.readAsDataURL(file);
        }

        function setImage(url) {
           $("#upload-image").attr("src", url);
        }
    
        function deleteContainer(evt) {
            evt = evt || window.event;
            var target = evt.target || evt.srcElement;
            target.parentNode.parentNode.parentNode.removeChild(target.parentNode.parentNode);
        }
        function OnCompleteAjax(data) {
            $editBtn = $(data).find('.edit-button');
            initBtns();

            $btnId = $editBtn.attr('btn-id');
            $id = $btnId.split('-')[1];
            $trueEditBtn = $(".edit-button[btn-id*='" + $btnId + "']");
            $trueEditBtn.attr('mode', 'create');
            $trueEditBtn.click();
            $trueEditBtn.parent().hide();
            deleteInps($id);
            //deleteInps($id);
        }
    </script>
}
